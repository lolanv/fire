Create a class CarUnit with the attribute:

std::string m_car_brand;
float m_car_price;
CarType m_car_type;(SEDAN,SUV,HATCHBACK)
int m_car_top_speed;
int m_car_rpm;
CarGear m_car_gear_system;(PRNDL,TIPTRONIC,CLASSIC)


Create a follwing function in a functionalities.cpp fie:

1) A function which Create at least 5 instance in a container which uses a unique std::syting ID attribute as key
    with shared pointer to CarUnit instance being the value in the hashtable bucket.

2) A function which check wheather all instance in the data container have the same gear system or not (all 
    instance must have the same m_car_gear_system value, types should not taken as input from the user)

3) A function to return a container of instance whose m_car_type matches with the value passed as parameter to this function.

4) A function to find and return m_car_price of the instance whose m_car_top_speed is lowest.

5) A function to return the m_car_rpm value for all instance whose ID is passed as a parameter.(ID
    should match with the key of the instance stored in the container)

6) A function to return the count of instance whose m_car_price is above a threshold value (given while
    calliing the function as parameter)


Note:
1) Create special function as per requriment
2) All Corner Case for functionalities must be handled using std::nullopt and std::optional types.
3) All data processing operations must be performed using STL algorithms.
4) Demostrate functionalities by Createing a sutaible main.cpp file



create .h and .cpp file for each class and make a functionalities .h and functionalities.cpp and main.cpp:
I try to solve here is my code:

CarUnit.h:
#ifndef CARUNIT_H
#define CARUNIT_H

#include <iostream>
#include "CarType.h"
#include "CarGear.h"

class CarUnit
{
private:
    /* data */
    std::string m_car_brand;
    float m_car_price;
    CarType m_car_type;
    int m_car_top_speed;
    int m_car_rpm;
    CarGear m_car_gear_system;

public:
    CarUnit() = default;                     // default constructor is defaulted
    CarUnit(CarUnit &) = delete;             // copy constructor is deleted
    CarUnit(CarUnit &&) = default;           // move constructor is defaulted
    CarUnit &operator=(CarUnit &) = delete;  // Copy Assignment Operator
    CarUnit &operator=(CarUnit &&) = delete; // Move Assignment Operator
    ~CarUnit() = default;                    // destructor is defaulted

    CarUnit(std::string car_brand,
            float car_price,
            CarType car_type,
            int car_top_speed,
            int car_rpm,
            CarGear car_gear_system);

    std::string carBrand() const { return m_car_brand; }
    void setCarBrand(const std::string &car_brand) { m_car_brand = car_brand; }

    float carPrice() const { return m_car_price; }
    void setCarPrice(float car_price) { m_car_price = car_price; }

    CarType carType() const { return m_car_type; }
    void setCarType(const CarType &car_type) { m_car_type = car_type; }

    int carTopSpeed() const { return m_car_top_speed; }
    void setCarTopSpeed(int car_top_speed) { m_car_top_speed = car_top_speed; }

    int carRpm() const { return m_car_rpm; }
    void setCarRpm(int car_rpm) { m_car_rpm = car_rpm; }

    CarGear carGearSystem() const { return m_car_gear_system; }
    void setCarGearSystem(const CarGear &car_gear_system) { m_car_gear_system = car_gear_system; }

    friend std::ostream &operator<<(std::ostream &os, const CarUnit &rhs);
};

#endif // CARUNIT_H


CarUnit.cpp:
#include "CarUnit.h"

std::ostream &operator<<(std::ostream &os, const CarUnit &rhs)
{
    os << "m_car_brand: " << rhs.m_car_brand
       << " m_car_price: " << rhs.m_car_price
       << " m_car_type: " << static_cast<int>(rhs.m_car_type)
       << " m_car_top_speed: " << rhs.m_car_top_speed
       << " m_car_rpm: " << rhs.m_car_rpm
       << " m_car_gear_system: " << static_cast<int>(rhs.m_car_gear_system);
    return os;
}

CarUnit::CarUnit(std::string car_brand, float car_price, CarType car_type, int car_top_speed, int car_rpm, CarGear car_gear_system)
    : m_car_brand(car_brand), m_car_price(car_price), m_car_type(car_type), m_car_top_speed(car_top_speed), m_car_rpm(car_rpm), m_car_gear_system(car_gear_system)
{
}


CarType.h:

#include <iostream>

enum class CarType
{
    SEDAN,
    SUV,
    HATCHBACK
};

CarGear.h:

#include <iostream>

enum class CarGear
{
    PRNDL,
    TIPTRONIC,
    CLASSIC
};

Functionalities.h:
#include<iostream>
#include"CarUnit.h"

void CreaeObject();