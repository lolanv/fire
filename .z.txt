Create a class Car having attribute:
std::string m_car_reg_num;
    float m_price;
    Reff m_car_engine; (using Reff=std::reference_wrapper<Engine>;)

Create a class Engine having attribute:

std::string m_engine_number;
    int m_engine_torque;
    int m_horsepower;
    EngineType m_engine_type; (CRDI,MPFI,TURBOCHARGED)


Create the following functions in a singleton class Operation.

1) A function which create at least 5 instance in a container that allows index based access to instance and allows
    dynamic resizing. instance must be craeted on the heap and must be managed by smart pointer(shared_ptr)

2) A function to return a container of Engine reference_wrapper for each instance of the input data.(Hint: Copy
    m_car_engine attribute of all instance into a container and return it).

3) A function to return a boolean to indicate wheather all instance have m_engine_torque value above 120.

4) A function to find the average m_horsepower value from instance whose m_price value is above a threashold value as a parameter.
    [Hint: if threashold value is 45000, identify instance with m_price above 45000 and find average m_horsepower from these instance only.]

5) A function to find the m_engine_type value of the instance whose m_car_reg_num is passed as a parameter.

6) A function to find the return Engine reference_wrapper for the instance m_engine_torque is the highest.


Note: 
a) Create special member function as per requriment.

b) All Corner Cases for functionalities must be handled using std::optinal types. Customer exception are not required.

c) All data processing Operations must be performed using STL algorithms.

d) Demostrate functionalities by createing a suitable main.cpp file.

e) Execute all functionalities in a seprate std::async thread


Create .h and .cpp file for each class and .h and .cpp file for functionalities and main.cpp file also